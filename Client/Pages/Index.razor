@page "/"
@using System.Text.Json

@inject HttpClient Http
@inject IWebAssemblyHostEnvironment HostEnvironment
@inject NavigationManager NavManager
@inject ILocalStorageService LocalStorage

<h1>Hello, world!</h1>
@if (identity == null)
{
    if (HostEnvironment.IsDevelopment())
    {
        <button class="btn btn-primary" @onclick="LogIn">Login</button>
    }
    else
    {
        <a href="/login" class="btn btn-primary">Login</a>
    }


}
else
{
    <button class="btn btn-primary" @onclick="LogOut">LogOut</button>
    

}

@code {

    private ClientIdentity identity;

    protected override async Task OnInitializedAsync()
    {

        identity = await LocalStorage.GetItemAsync<ClientIdentity>("User");
        if (identity == null && HostEnvironment.IsProduction())
        {
            identity = (await Http.GetFromJsonAsync<Principal>(".auth/me",new JsonSerializerOptions()
            {
                PropertyNameCaseInsensitive = true
            })).ClientPrincipal;
            if (identity != null)
            {
                await LocalStorage.SetItemAsync("User", identity);
            }
        }

    }

    private async Task LogIn()
    {
        if (HostEnvironment.IsDevelopment())
        {
            identity = new ClientIdentity()
            {
                UserDetails = "drew@killion.me",
                UserRoles = new[] { "anonymous", "authenticated" },
                UserId = Guid.NewGuid().ToString(),
                IdentityProvider = "google"
            };
            await LocalStorage.SetItemAsync("User", identity);
        }
        else
        {
            NavManager.NavigateTo(".auth/login/google");
        }
    }

    private async Task LogOut()
    {
        await LocalStorage.RemoveItemAsync("User");
        if (HostEnvironment.IsProduction())
        {

            NavManager.NavigateTo("/logout");
        }
    }

    public partial class Principal
    {
        public ClientIdentity ClientPrincipal { get; set; }
    }
}